/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: trf_msg.proto */

#ifndef PROTOBUF_C_trf_5fmsg_2eproto__INCLUDED
#define PROTOBUF_C_trf_5fmsg_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct TrfMsg__APIVersion TrfMsg__APIVersion;
typedef struct TrfMsg__AddrCand TrfMsg__AddrCand;
typedef struct TrfMsg__Transport TrfMsg__Transport;
typedef struct TrfMsg__Display TrfMsg__Display;
typedef struct TrfMsg__DisplayReq TrfMsg__DisplayReq;
typedef struct TrfMsg__ClientHello TrfMsg__ClientHello;
typedef struct TrfMsg__ServerHello TrfMsg__ServerHello;
typedef struct TrfMsg__ServerReject TrfMsg__ServerReject;
typedef struct TrfMsg__AddrPF TrfMsg__AddrPF;
typedef struct TrfMsg__ClientCap TrfMsg__ClientCap;
typedef struct TrfMsg__ServerCap TrfMsg__ServerCap;
typedef struct TrfMsg__Endpoint TrfMsg__Endpoint;
typedef struct TrfMsg__ClientDispReq TrfMsg__ClientDispReq;
typedef struct TrfMsg__ServerDisp TrfMsg__ServerDisp;
typedef struct TrfMsg__ClientReq TrfMsg__ClientReq;
typedef struct TrfMsg__ServerAckReq TrfMsg__ServerAckReq;
typedef struct TrfMsg__ClientFReq TrfMsg__ClientFReq;
typedef struct TrfMsg__ServerAckFReq TrfMsg__ServerAckFReq;
typedef struct TrfMsg__Disconnect TrfMsg__Disconnect;
typedef struct TrfMsg__ChannelOpen TrfMsg__ChannelOpen;
typedef struct TrfMsg__MessageWrapper TrfMsg__MessageWrapper;


/* --- enums --- */


/* --- messages --- */

struct  TrfMsg__APIVersion
{
  ProtobufCMessage base;
  /*
   * API major version
   */
  uint32_t api_major;
  /*
   * API minor version
   */
  uint32_t api_minor;
  /*
   * API patch version
   */
  uint32_t api_patch;
};
#define TRF_MSG__APIVERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__apiversion__descriptor) \
    , 0, 0, 0 }


struct  TrfMsg__AddrCand
{
  ProtobufCMessage base;
  /*
   * Interface address
   */
  char *addr;
  /*
   * Netmask
   */
  int32_t netmask;
  /*
   * Preflight check port
   */
  int32_t port;
  /*
   * Link speed
   */
  int32_t speed;
};
#define TRF_MSG__ADDR_CAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__addr_cand__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  TrfMsg__Transport
{
  ProtobufCMessage base;
  /*
   * Transport provider name e.g. "tcp;ofi_rxm"
   */
  char *name;
  /*
   * Transport wire protocol e.g. "FI_PROTO_RXM"
   */
  char *proto;
  /*
   * Transport provider routing information
   */
  char *route;
};
#define TRF_MSG__TRANSPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__transport__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  TrfMsg__Display
{
  ProtobufCMessage base;
  /*
   * Display ID
   */
  uint32_t id;
  /*
   * Display friendly name e.g. monitor name
   */
  char *name;
  /*
   * Display width
   */
  uint32_t width;
  /*
   * Display height
   */
  uint32_t height;
  /*
   * Refresh rate
   */
  int32_t rate;
  /*
   * Native texture formats
   */
  size_t n_tex_fmt;
  uint32_t *tex_fmt;
  /*
   * Display group ID
   */
  uint32_t dgid;
  /*
   * Relative display offset x
   */
  int32_t x_offset;
  /*
   * Relative display offset y
   */
  int32_t y_offset;
};
#define TRF_MSG__DISPLAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__display__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0,NULL, 0, 0, 0 }


struct  TrfMsg__DisplayReq
{
  ProtobufCMessage base;
  /*
   * Requested display ID
   */
  uint32_t id;
  /*
   * Requested display width
   */
  uint32_t width;
  /*
   * Requested display height
   */
  uint32_t height;
  /*
   * Requested texture format
   */
  uint32_t tex_fmt;
};
#define TRF_MSG__DISPLAY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__display_req__descriptor) \
    , 0, 0, 0, 0 }


struct  TrfMsg__ClientHello
{
  ProtobufCMessage base;
  /*
   * API version
   */
  TrfMsg__APIVersion *version;
};
#define TRF_MSG__CLIENT_HELLO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__client_hello__descriptor) \
    , NULL }


struct  TrfMsg__ServerHello
{
  ProtobufCMessage base;
  /*
   * New session ID
   */
  uint64_t new_session_id;
};
#define TRF_MSG__SERVER_HELLO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__server_hello__descriptor) \
    , 0 }


struct  TrfMsg__ServerReject
{
  ProtobufCMessage base;
  /*
   * Server API version
   */
  TrfMsg__APIVersion *version;
};
#define TRF_MSG__SERVER_REJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__server_reject__descriptor) \
    , NULL }


struct  TrfMsg__AddrPF
{
  ProtobufCMessage base;
  /*
   * Address candidates
   */
  size_t n_addrs;
  TrfMsg__AddrCand **addrs;
};
#define TRF_MSG__ADDR_PF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__addr_pf__descriptor) \
    , 0,NULL }


struct  TrfMsg__ClientCap
{
  ProtobufCMessage base;
  /*
   * Client supported transports
   */
  size_t n_transports;
  TrfMsg__Transport **transports;
};
#define TRF_MSG__CLIENT_CAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__client_cap__descriptor) \
    , 0,NULL }


struct  TrfMsg__ServerCap
{
  ProtobufCMessage base;
  /*
   * Recommended bind address
   */
  char *bind_addr;
  /*
   * Server selected transport
   */
  TrfMsg__Transport *transport;
};
#define TRF_MSG__SERVER_CAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__server_cap__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  TrfMsg__Endpoint
{
  ProtobufCMessage base;
  /*
   * Selected endpoint transport details
   */
  TrfMsg__Transport *transport;
};
#define TRF_MSG__ENDPOINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__endpoint__descriptor) \
    , NULL }


struct  TrfMsg__ClientDispReq
{
  ProtobufCMessage base;
  /*
   * Unused
   */
  uint32_t info;
};
#define TRF_MSG__CLIENT_DISP_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__client_disp_req__descriptor) \
    , 0 }


struct  TrfMsg__ServerDisp
{
  ProtobufCMessage base;
  /*
   * List of displays on server side
   */
  size_t n_displays;
  TrfMsg__Display **displays;
};
#define TRF_MSG__SERVER_DISP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__server_disp__descriptor) \
    , 0,NULL }


struct  TrfMsg__ClientReq
{
  ProtobufCMessage base;
  /*
   * Requested displays from server
   */
  size_t n_display;
  TrfMsg__DisplayReq **display;
};
#define TRF_MSG__CLIENT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__client_req__descriptor) \
    , 0,NULL }


struct  TrfMsg__ServerAckReq
{
  ProtobufCMessage base;
  /*
   * Display ID confirmation
   */
  size_t n_display_ids;
  uint32_t *display_ids;
};
#define TRF_MSG__SERVER_ACK_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__server_ack_req__descriptor) \
    , 0,NULL }


struct  TrfMsg__ClientFReq
{
  ProtobufCMessage base;
  /*
   * Display ID to update
   */
  uint32_t id;
  /*
   * Current frame number
   */
  uint32_t frame_cntr;
  /*
   * Client receive virtual memory address
   */
  uint64_t addr;
  /*
   * Client receive rkey
   */
  uint64_t rkey;
};
#define TRF_MSG__CLIENT_FREQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__client_freq__descriptor) \
    , 0, 0, 0, 0 }


struct  TrfMsg__ServerAckFReq
{
  ProtobufCMessage base;
  /*
   * Display ID that was updated
   */
  uint32_t id;
  /*
   * New frame number
   */
  uint32_t frame_cntr;
};
#define TRF_MSG__SERVER_ACK_FREQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__server_ack_freq__descriptor) \
    , 0, 0 }


struct  TrfMsg__Disconnect
{
  ProtobufCMessage base;
  /*
   * Extra info e.g. error, unused
   */
  uint32_t info;
};
#define TRF_MSG__DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__disconnect__descriptor) \
    , 0 }


struct  TrfMsg__ChannelOpen
{
  ProtobufCMessage base;
  /*
   * Channel type
   */
  uint32_t type;
};
#define TRF_MSG__CHANNEL_OPEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__channel_open__descriptor) \
    , 0 }


typedef enum {
  TRF_MSG__MESSAGE_WRAPPER__WDATA__NOT_SET = 0,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_CLIENT_HELLO = 2,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_SERVER_HELLO = 3,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_SERVER_REJECT = 4,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_DISCONNECT = 9,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_CLIENT_CAP = 10,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_SERVER_CAP = 11,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_ENDPOINT = 12,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_CLIENT_DISP_REQ = 13,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_SERVER_DISP = 14,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_CLIENT_REQ = 15,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_SERVER_ACK = 16,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_CLIENT_F_REQ = 17,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_SERVER_ACK_F_REQ = 18,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_ADDR_PF = 19,
  TRF_MSG__MESSAGE_WRAPPER__WDATA_CH_OPEN = 20
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRF_MSG__MESSAGE_WRAPPER__WDATA__CASE)
} TrfMsg__MessageWrapper__WdataCase;

struct  TrfMsg__MessageWrapper
{
  ProtobufCMessage base;
  uint64_t session_id;
  TrfMsg__MessageWrapper__WdataCase wdata_case;
  union {
    TrfMsg__ClientHello *client_hello;
    TrfMsg__ServerHello *server_hello;
    TrfMsg__ServerReject *server_reject;
    TrfMsg__Disconnect *disconnect;
    TrfMsg__ClientCap *client_cap;
    TrfMsg__ServerCap *server_cap;
    TrfMsg__Endpoint *endpoint;
    TrfMsg__ClientDispReq *client_disp_req;
    TrfMsg__ServerDisp *server_disp;
    TrfMsg__ClientReq *client_req;
    TrfMsg__ServerAckReq *server_ack;
    TrfMsg__ClientFReq *client_f_req;
    TrfMsg__ServerAckFReq *server_ack_f_req;
    TrfMsg__AddrPF *addr_pf;
    TrfMsg__ChannelOpen *ch_open;
  };
};
#define TRF_MSG__MESSAGE_WRAPPER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trf_msg__message_wrapper__descriptor) \
    , 0, TRF_MSG__MESSAGE_WRAPPER__WDATA__NOT_SET, {0} }


/* TrfMsg__APIVersion methods */
void   trf_msg__apiversion__init
                     (TrfMsg__APIVersion         *message);
size_t trf_msg__apiversion__get_packed_size
                     (const TrfMsg__APIVersion   *message);
size_t trf_msg__apiversion__pack
                     (const TrfMsg__APIVersion   *message,
                      uint8_t             *out);
size_t trf_msg__apiversion__pack_to_buffer
                     (const TrfMsg__APIVersion   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__APIVersion *
       trf_msg__apiversion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__apiversion__free_unpacked
                     (TrfMsg__APIVersion *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__AddrCand methods */
void   trf_msg__addr_cand__init
                     (TrfMsg__AddrCand         *message);
size_t trf_msg__addr_cand__get_packed_size
                     (const TrfMsg__AddrCand   *message);
size_t trf_msg__addr_cand__pack
                     (const TrfMsg__AddrCand   *message,
                      uint8_t             *out);
size_t trf_msg__addr_cand__pack_to_buffer
                     (const TrfMsg__AddrCand   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__AddrCand *
       trf_msg__addr_cand__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__addr_cand__free_unpacked
                     (TrfMsg__AddrCand *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__Transport methods */
void   trf_msg__transport__init
                     (TrfMsg__Transport         *message);
size_t trf_msg__transport__get_packed_size
                     (const TrfMsg__Transport   *message);
size_t trf_msg__transport__pack
                     (const TrfMsg__Transport   *message,
                      uint8_t             *out);
size_t trf_msg__transport__pack_to_buffer
                     (const TrfMsg__Transport   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__Transport *
       trf_msg__transport__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__transport__free_unpacked
                     (TrfMsg__Transport *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__Display methods */
void   trf_msg__display__init
                     (TrfMsg__Display         *message);
size_t trf_msg__display__get_packed_size
                     (const TrfMsg__Display   *message);
size_t trf_msg__display__pack
                     (const TrfMsg__Display   *message,
                      uint8_t             *out);
size_t trf_msg__display__pack_to_buffer
                     (const TrfMsg__Display   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__Display *
       trf_msg__display__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__display__free_unpacked
                     (TrfMsg__Display *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__DisplayReq methods */
void   trf_msg__display_req__init
                     (TrfMsg__DisplayReq         *message);
size_t trf_msg__display_req__get_packed_size
                     (const TrfMsg__DisplayReq   *message);
size_t trf_msg__display_req__pack
                     (const TrfMsg__DisplayReq   *message,
                      uint8_t             *out);
size_t trf_msg__display_req__pack_to_buffer
                     (const TrfMsg__DisplayReq   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__DisplayReq *
       trf_msg__display_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__display_req__free_unpacked
                     (TrfMsg__DisplayReq *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ClientHello methods */
void   trf_msg__client_hello__init
                     (TrfMsg__ClientHello         *message);
size_t trf_msg__client_hello__get_packed_size
                     (const TrfMsg__ClientHello   *message);
size_t trf_msg__client_hello__pack
                     (const TrfMsg__ClientHello   *message,
                      uint8_t             *out);
size_t trf_msg__client_hello__pack_to_buffer
                     (const TrfMsg__ClientHello   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ClientHello *
       trf_msg__client_hello__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__client_hello__free_unpacked
                     (TrfMsg__ClientHello *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ServerHello methods */
void   trf_msg__server_hello__init
                     (TrfMsg__ServerHello         *message);
size_t trf_msg__server_hello__get_packed_size
                     (const TrfMsg__ServerHello   *message);
size_t trf_msg__server_hello__pack
                     (const TrfMsg__ServerHello   *message,
                      uint8_t             *out);
size_t trf_msg__server_hello__pack_to_buffer
                     (const TrfMsg__ServerHello   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ServerHello *
       trf_msg__server_hello__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__server_hello__free_unpacked
                     (TrfMsg__ServerHello *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ServerReject methods */
void   trf_msg__server_reject__init
                     (TrfMsg__ServerReject         *message);
size_t trf_msg__server_reject__get_packed_size
                     (const TrfMsg__ServerReject   *message);
size_t trf_msg__server_reject__pack
                     (const TrfMsg__ServerReject   *message,
                      uint8_t             *out);
size_t trf_msg__server_reject__pack_to_buffer
                     (const TrfMsg__ServerReject   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ServerReject *
       trf_msg__server_reject__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__server_reject__free_unpacked
                     (TrfMsg__ServerReject *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__AddrPF methods */
void   trf_msg__addr_pf__init
                     (TrfMsg__AddrPF         *message);
size_t trf_msg__addr_pf__get_packed_size
                     (const TrfMsg__AddrPF   *message);
size_t trf_msg__addr_pf__pack
                     (const TrfMsg__AddrPF   *message,
                      uint8_t             *out);
size_t trf_msg__addr_pf__pack_to_buffer
                     (const TrfMsg__AddrPF   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__AddrPF *
       trf_msg__addr_pf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__addr_pf__free_unpacked
                     (TrfMsg__AddrPF *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ClientCap methods */
void   trf_msg__client_cap__init
                     (TrfMsg__ClientCap         *message);
size_t trf_msg__client_cap__get_packed_size
                     (const TrfMsg__ClientCap   *message);
size_t trf_msg__client_cap__pack
                     (const TrfMsg__ClientCap   *message,
                      uint8_t             *out);
size_t trf_msg__client_cap__pack_to_buffer
                     (const TrfMsg__ClientCap   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ClientCap *
       trf_msg__client_cap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__client_cap__free_unpacked
                     (TrfMsg__ClientCap *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ServerCap methods */
void   trf_msg__server_cap__init
                     (TrfMsg__ServerCap         *message);
size_t trf_msg__server_cap__get_packed_size
                     (const TrfMsg__ServerCap   *message);
size_t trf_msg__server_cap__pack
                     (const TrfMsg__ServerCap   *message,
                      uint8_t             *out);
size_t trf_msg__server_cap__pack_to_buffer
                     (const TrfMsg__ServerCap   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ServerCap *
       trf_msg__server_cap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__server_cap__free_unpacked
                     (TrfMsg__ServerCap *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__Endpoint methods */
void   trf_msg__endpoint__init
                     (TrfMsg__Endpoint         *message);
size_t trf_msg__endpoint__get_packed_size
                     (const TrfMsg__Endpoint   *message);
size_t trf_msg__endpoint__pack
                     (const TrfMsg__Endpoint   *message,
                      uint8_t             *out);
size_t trf_msg__endpoint__pack_to_buffer
                     (const TrfMsg__Endpoint   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__Endpoint *
       trf_msg__endpoint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__endpoint__free_unpacked
                     (TrfMsg__Endpoint *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ClientDispReq methods */
void   trf_msg__client_disp_req__init
                     (TrfMsg__ClientDispReq         *message);
size_t trf_msg__client_disp_req__get_packed_size
                     (const TrfMsg__ClientDispReq   *message);
size_t trf_msg__client_disp_req__pack
                     (const TrfMsg__ClientDispReq   *message,
                      uint8_t             *out);
size_t trf_msg__client_disp_req__pack_to_buffer
                     (const TrfMsg__ClientDispReq   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ClientDispReq *
       trf_msg__client_disp_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__client_disp_req__free_unpacked
                     (TrfMsg__ClientDispReq *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ServerDisp methods */
void   trf_msg__server_disp__init
                     (TrfMsg__ServerDisp         *message);
size_t trf_msg__server_disp__get_packed_size
                     (const TrfMsg__ServerDisp   *message);
size_t trf_msg__server_disp__pack
                     (const TrfMsg__ServerDisp   *message,
                      uint8_t             *out);
size_t trf_msg__server_disp__pack_to_buffer
                     (const TrfMsg__ServerDisp   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ServerDisp *
       trf_msg__server_disp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__server_disp__free_unpacked
                     (TrfMsg__ServerDisp *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ClientReq methods */
void   trf_msg__client_req__init
                     (TrfMsg__ClientReq         *message);
size_t trf_msg__client_req__get_packed_size
                     (const TrfMsg__ClientReq   *message);
size_t trf_msg__client_req__pack
                     (const TrfMsg__ClientReq   *message,
                      uint8_t             *out);
size_t trf_msg__client_req__pack_to_buffer
                     (const TrfMsg__ClientReq   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ClientReq *
       trf_msg__client_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__client_req__free_unpacked
                     (TrfMsg__ClientReq *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ServerAckReq methods */
void   trf_msg__server_ack_req__init
                     (TrfMsg__ServerAckReq         *message);
size_t trf_msg__server_ack_req__get_packed_size
                     (const TrfMsg__ServerAckReq   *message);
size_t trf_msg__server_ack_req__pack
                     (const TrfMsg__ServerAckReq   *message,
                      uint8_t             *out);
size_t trf_msg__server_ack_req__pack_to_buffer
                     (const TrfMsg__ServerAckReq   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ServerAckReq *
       trf_msg__server_ack_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__server_ack_req__free_unpacked
                     (TrfMsg__ServerAckReq *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ClientFReq methods */
void   trf_msg__client_freq__init
                     (TrfMsg__ClientFReq         *message);
size_t trf_msg__client_freq__get_packed_size
                     (const TrfMsg__ClientFReq   *message);
size_t trf_msg__client_freq__pack
                     (const TrfMsg__ClientFReq   *message,
                      uint8_t             *out);
size_t trf_msg__client_freq__pack_to_buffer
                     (const TrfMsg__ClientFReq   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ClientFReq *
       trf_msg__client_freq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__client_freq__free_unpacked
                     (TrfMsg__ClientFReq *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ServerAckFReq methods */
void   trf_msg__server_ack_freq__init
                     (TrfMsg__ServerAckFReq         *message);
size_t trf_msg__server_ack_freq__get_packed_size
                     (const TrfMsg__ServerAckFReq   *message);
size_t trf_msg__server_ack_freq__pack
                     (const TrfMsg__ServerAckFReq   *message,
                      uint8_t             *out);
size_t trf_msg__server_ack_freq__pack_to_buffer
                     (const TrfMsg__ServerAckFReq   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ServerAckFReq *
       trf_msg__server_ack_freq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__server_ack_freq__free_unpacked
                     (TrfMsg__ServerAckFReq *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__Disconnect methods */
void   trf_msg__disconnect__init
                     (TrfMsg__Disconnect         *message);
size_t trf_msg__disconnect__get_packed_size
                     (const TrfMsg__Disconnect   *message);
size_t trf_msg__disconnect__pack
                     (const TrfMsg__Disconnect   *message,
                      uint8_t             *out);
size_t trf_msg__disconnect__pack_to_buffer
                     (const TrfMsg__Disconnect   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__Disconnect *
       trf_msg__disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__disconnect__free_unpacked
                     (TrfMsg__Disconnect *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__ChannelOpen methods */
void   trf_msg__channel_open__init
                     (TrfMsg__ChannelOpen         *message);
size_t trf_msg__channel_open__get_packed_size
                     (const TrfMsg__ChannelOpen   *message);
size_t trf_msg__channel_open__pack
                     (const TrfMsg__ChannelOpen   *message,
                      uint8_t             *out);
size_t trf_msg__channel_open__pack_to_buffer
                     (const TrfMsg__ChannelOpen   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__ChannelOpen *
       trf_msg__channel_open__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__channel_open__free_unpacked
                     (TrfMsg__ChannelOpen *message,
                      ProtobufCAllocator *allocator);
/* TrfMsg__MessageWrapper methods */
void   trf_msg__message_wrapper__init
                     (TrfMsg__MessageWrapper         *message);
size_t trf_msg__message_wrapper__get_packed_size
                     (const TrfMsg__MessageWrapper   *message);
size_t trf_msg__message_wrapper__pack
                     (const TrfMsg__MessageWrapper   *message,
                      uint8_t             *out);
size_t trf_msg__message_wrapper__pack_to_buffer
                     (const TrfMsg__MessageWrapper   *message,
                      ProtobufCBuffer     *buffer);
TrfMsg__MessageWrapper *
       trf_msg__message_wrapper__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trf_msg__message_wrapper__free_unpacked
                     (TrfMsg__MessageWrapper *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TrfMsg__APIVersion_Closure)
                 (const TrfMsg__APIVersion *message,
                  void *closure_data);
typedef void (*TrfMsg__AddrCand_Closure)
                 (const TrfMsg__AddrCand *message,
                  void *closure_data);
typedef void (*TrfMsg__Transport_Closure)
                 (const TrfMsg__Transport *message,
                  void *closure_data);
typedef void (*TrfMsg__Display_Closure)
                 (const TrfMsg__Display *message,
                  void *closure_data);
typedef void (*TrfMsg__DisplayReq_Closure)
                 (const TrfMsg__DisplayReq *message,
                  void *closure_data);
typedef void (*TrfMsg__ClientHello_Closure)
                 (const TrfMsg__ClientHello *message,
                  void *closure_data);
typedef void (*TrfMsg__ServerHello_Closure)
                 (const TrfMsg__ServerHello *message,
                  void *closure_data);
typedef void (*TrfMsg__ServerReject_Closure)
                 (const TrfMsg__ServerReject *message,
                  void *closure_data);
typedef void (*TrfMsg__AddrPF_Closure)
                 (const TrfMsg__AddrPF *message,
                  void *closure_data);
typedef void (*TrfMsg__ClientCap_Closure)
                 (const TrfMsg__ClientCap *message,
                  void *closure_data);
typedef void (*TrfMsg__ServerCap_Closure)
                 (const TrfMsg__ServerCap *message,
                  void *closure_data);
typedef void (*TrfMsg__Endpoint_Closure)
                 (const TrfMsg__Endpoint *message,
                  void *closure_data);
typedef void (*TrfMsg__ClientDispReq_Closure)
                 (const TrfMsg__ClientDispReq *message,
                  void *closure_data);
typedef void (*TrfMsg__ServerDisp_Closure)
                 (const TrfMsg__ServerDisp *message,
                  void *closure_data);
typedef void (*TrfMsg__ClientReq_Closure)
                 (const TrfMsg__ClientReq *message,
                  void *closure_data);
typedef void (*TrfMsg__ServerAckReq_Closure)
                 (const TrfMsg__ServerAckReq *message,
                  void *closure_data);
typedef void (*TrfMsg__ClientFReq_Closure)
                 (const TrfMsg__ClientFReq *message,
                  void *closure_data);
typedef void (*TrfMsg__ServerAckFReq_Closure)
                 (const TrfMsg__ServerAckFReq *message,
                  void *closure_data);
typedef void (*TrfMsg__Disconnect_Closure)
                 (const TrfMsg__Disconnect *message,
                  void *closure_data);
typedef void (*TrfMsg__ChannelOpen_Closure)
                 (const TrfMsg__ChannelOpen *message,
                  void *closure_data);
typedef void (*TrfMsg__MessageWrapper_Closure)
                 (const TrfMsg__MessageWrapper *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor trf_msg__apiversion__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__addr_cand__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__transport__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__display__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__display_req__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__client_hello__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__server_hello__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__server_reject__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__addr_pf__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__client_cap__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__server_cap__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__endpoint__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__client_disp_req__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__server_disp__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__client_req__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__server_ack_req__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__client_freq__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__server_ack_freq__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__disconnect__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__channel_open__descriptor;
extern const ProtobufCMessageDescriptor trf_msg__message_wrapper__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_trf_5fmsg_2eproto__INCLUDED */
